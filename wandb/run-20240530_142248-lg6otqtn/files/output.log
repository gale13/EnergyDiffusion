obs: torch.Size([1, 30])
shape (1, 74)
torch.Size([1, 74])
torch.Size([1, 256]) torch.Size([1, 16]) torch.Size([1, 74])
1
torch.Size([1, 74])
torch.Size([1, 1])
torch.Size([1, 74])
torch.Size([1, 1, 74])
torch.Size([1, 256]) torch.Size([1, 16]) torch.Size([1, 74])
1
torch.Size([1, 1, 74])
torch.Size([1, 1, 1])
torch.Size([1, 1, 74])
torch.Size([1, 1, 1, 74])
torch.Size([1, 256]) torch.Size([1, 16]) torch.Size([1, 74])
1
torch.Size([1, 1, 1, 74])
torch.Size([1, 1, 1, 1])
torch.Size([1, 1, 1, 74])
torch.Size([1, 1, 1, 1, 74])
torch.Size([1, 256]) torch.Size([1, 16]) torch.Size([1, 74])
1
torch.Size([1, 1, 1, 1, 74])
torch.Size([1, 1, 1, 1, 1])
torch.Size([1, 1, 1, 1, 74])
torch.Size([1, 1, 1, 1, 1, 74])
torch.Size([1, 256]) torch.Size([1, 16]) torch.Size([1, 74])
1
torch.Size([1, 1, 1, 1, 1, 74])
torch.Size([1, 1, 1, 1, 1, 1])
torch.Size([1, 1, 1, 1, 1, 74])
torch.Size([1, 1, 1, 1, 1, 1, 74])
torch.Size([1, 256]) torch.Size([1, 16]) torch.Size([1, 74])
1
torch.Size([1, 1, 1, 1, 1, 1, 74])
torch.Size([1, 1, 1, 1, 1, 1, 1])
torch.Size([1, 1, 1, 1, 1, 1, 74])
sample torch.Size([1, 1, 1, 1, 1, 1, 74])
logits tensor([[[[[[[-0.3479,  0.6630,  0.6180, -0.2870, -1.0000,  0.8285,  1.0000,
               0.1131, -0.4880, -0.0297,  1.0000, -0.9122, -1.0000, -0.6445,
              -1.0000, -0.6564,  0.0530,  0.1363,  0.8939,  0.6290,  0.3097,
              -0.6467, -0.7335, -0.0510,  1.0000,  0.2563,  0.5339, -0.6403,
               0.3771, -0.5867,  1.0000,  0.8370,  1.0000, -0.8734, -1.0000,
              -0.9300,  1.0000, -1.0000, -1.0000,  0.6343,  0.2611, -0.5749,
              -0.3307, -0.9205,  0.1519,  0.7819, -1.0000,  1.0000, -1.0000,
              -1.0000, -1.0000, -0.0730,  0.8541, -0.0394, -0.3287, -1.0000,
              -0.5169, -0.1620, -0.4766, -0.2301, -1.0000, -1.0000,  0.2167,
              -0.0158,  0.0011, -1.0000, -0.1070, -0.7671,  1.0000,  0.4051,
               1.0000,  1.0000,  0.3081,  0.9422]]]]]]], device='cuda:0')
Traceback (most recent call last):
  File "main.py", line 102, in <module>
    result = offpolicy_trainer(
  File "/opt/conda/envs/gdmopt/lib/python3.8/site-packages/tianshou/trainer/offpolicy.py", line 133, in offpolicy_trainer
    return OffpolicyTrainer(*args, **kwargs).run()
  File "/opt/conda/envs/gdmopt/lib/python3.8/site-packages/tianshou/trainer/base.py", line 441, in run
    deque(self, maxlen=0)  # feed the entire iterator into a zero-length deque
  File "/opt/conda/envs/gdmopt/lib/python3.8/site-packages/tianshou/trainer/base.py", line 252, in __iter__
    self.reset()
  File "/opt/conda/envs/gdmopt/lib/python3.8/site-packages/tianshou/trainer/base.py", line 237, in reset
    test_result = test_episode(
  File "/opt/conda/envs/gdmopt/lib/python3.8/site-packages/tianshou/trainer/utils.py", line 27, in test_episode
    result = collector.collect(n_episode=n_episode)
  File "/opt/conda/envs/gdmopt/lib/python3.8/site-packages/tianshou/data/collector.py", line 314, in collect
    result = self.env.step(action_remap, ready_env_ids)  # type: ignore
  File "/opt/conda/envs/gdmopt/lib/python3.8/site-packages/tianshou/env/venvs.py", line 284, in step
    self.workers[j].send(action[i])
  File "/opt/conda/envs/gdmopt/lib/python3.8/site-packages/tianshou/env/worker/dummy.py", line 38, in send
    self.result = self.env.step(action)  # type: ignore
  File "/lxy/energydiffusion/env/distEnergy.py", line 103, in step
    assert self.action_space.contains(action), "%r (%s) invalid" % (
AssertionError: array([[[[[[-0.3479367 ,  0.66299   ,  0.61800563, -0.2869929 ,
            -1.        ,  0.8285126 ,  1.        ,  0.11314327,
            -0.48800695, -0.0297391 ,  1.        , -0.9122463 ,
            -1.        , -0.6444741 , -1.        , -0.65644556,
             0.0530054 ,  0.13630596,  0.8938612 ,  0.6289894 ,
             0.30970684, -0.64669186, -0.7335245 , -0.05101199,
             1.        ,  0.25633085,  0.533922  , -0.64026403,
             0.3771135 , -0.5866592 ,  1.        ,  0.8369789 ,
             1.        , -0.8734456 , -1.        , -0.92995465,
             1.        , -1.        , -1.        ,  0.63426137,
             0.26107657, -0.57487327, -0.33070523, -0.9205109 ,
             0.1518797 ,  0.78186464, -1.        ,  1.        ,
            -1.        , -1.        , -1.        , -0.0730289 ,
             0.8540524 , -0.03944884, -0.32869077, -1.        ,
            -0.51687413, -0.16196164, -0.47656244, -0.23005804,
            -1.        , -1.        ,  0.21669005, -0.01584683,
             0.00107688, -1.        , -0.10697773, -0.76713765,
             1.        ,  0.40509343,  1.        ,  1.        ,
             0.30814952,  0.9422389 ]]]]]], dtype=float32) (<class 'numpy.ndarray'>) invalid